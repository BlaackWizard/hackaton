from dataclasses import dataclass
from datetime import datetime, timedelta

from backend.src.application.common.ai_model import AiModel
from backend.src.application.common.gateways.chat_gateway import ChatGateway
from backend.src.application.dto import UserIdRequest
from backend.src.models.message import Message


@dataclass
class FrequentRequests:
    chat_gateway: ChatGateway
    ai_model: AiModel

    async def execute(self, data: UserIdRequest) -> dict:
        raw_messages = await self.chat_gateway.get_all_messages(data.user_id)

        now = datetime.now()
        thirty_days_ago = now - timedelta(days=30)

        recent_messages = [
            msg for msg in raw_messages
            if "created_at" in msg and datetime.fromisoformat(msg["created_at"]) >= thirty_days_ago
        ]

        if not recent_messages:
            return {"summary": "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π."}

        message_texts = [msg["content"] for msg in recent_messages if "content" in msg]

        combined_text = "\n".join(f"- {text}" for text in message_texts)

        system_prompt = (
            f"""
            –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –æ–∫–æ–ª–æ 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ò –æ—Ç–≤–µ—á–∞–π –ø—Ä—è–º–æ –º–Ω–µ –∞ –Ω–µ –æ—Ç 3-–ª–∏—Ü–∞, –æ—Ç–≤–µ—Ç—å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ 
            –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ª—é–¥–µ–π, –Ω–∞–π–¥–∏ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞ –∏–ª–∏ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è. 
            –ó–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª–∏ –∏—Ö –Ω–∞ –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á–µ–≥–æ —Ö–æ—Ç—è—Ç –ª—é–¥–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö —Ç–µ–º –∏–ª–∏ –∂–µ–ª–∞–Ω–∏–π.\n\n–¢–µ–ø–µ—Ä—å –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–µ—Ç–∏ —Å–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å —Å—É—Ç—å! üòä
            """
        )
        full_input = f"{system_prompt}\n\n{combined_text}"

        fake_message = Message(
            id=0,
            user_id=data.user_id,
            content=full_input,
            ai_response=None,
            created_at=now,
            chat_id=0
        )

        summary = await self.ai_model.generate_text(fake_message)

        return {"summary": summary}
